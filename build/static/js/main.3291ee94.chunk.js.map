{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","status","useState","query","setQuery","weather","setWeather","Date","getHours","className","format","ticking","timezone","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","main","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oMAIMA,EACC,mCADDA,EAEE,2CAqFOC,MAnFf,WAAe,IAgCTC,EAhCQ,EAEaC,mBAAS,IAFtB,mBAELC,EAFK,KAEEC,EAFF,OAGiBF,mBAAS,IAH1B,mBAGLG,EAHK,KAGIC,EAHJ,KAsCZ,OAJEL,GAHS,IAAIM,MAAOC,WAEb,GACA,MAEA,YAGP,yBAAKC,UAAWR,GAKd,yBAAKQ,UAAU,gBACb,kBAAC,IAAD,CAAOC,OAAQ,QAASC,SAAS,EAAMC,SAAU,yBAEnD,8BACE,yBAAKH,UAAU,cACb,2BACAI,KAAK,OACLJ,UAAU,aACVK,YAAY,kBACZC,SAAU,SAAAC,GAAC,OAAIZ,EAASY,EAAEC,OAAOC,QACjCA,MAAOf,EACPgB,WAjDO,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIvB,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACzDwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJtB,EAAS,IACTE,EAAWoB,GACXC,QAAQC,IAAIF,UA6Ca,oBAAhBrB,EAAQwB,KACjB,6BACE,6BACE,yBAAKpB,UAAU,gBACf,yBAAKA,UAAU,YAAf,IAA4BJ,EAAQyB,KAApC,KAA4CzB,EAAQ0B,IAAIC,SACxD,yBAAKvB,UAAU,QA7CP,SAACwB,GACjB,IAIIC,EAFO,CAAE,UAAU,QAAS,SAAU,YAAa,SAAU,UAAW,UAE7DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANQ,CAAC,QAAS,UAAW,QAAS,QAAS,OAAQ,QAAS,QAAS,SAC7E,aAAc,UAAW,YAAa,aAKnBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,eAA4BE,EAA5B,eAAwCE,GAmCTE,CAAY,IAAInC,SAIrC,yBAAKE,UAAU,eACb,yBAAKA,UAAU,QACZkC,KAAKC,MAAMvC,EAAQwB,KAAKgB,MAD3B,UAGA,yBAAKpC,UAAU,WACdJ,EAAQA,QAAQ,GAAGwB,QAKvB,MCzEOiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.3291ee94.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Clock from 'react-live-clock';\n// import Switch from './switch'\n\nconst api = {\n  key: \"7d52c1e2cd7823463e5abcb379cfeaaf\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\nfunction App(){\n\n  const [query, setQuery]= useState('');\n  const [weather, setWeather]= useState({});\n  // const [value, setValue]= useState(false);\n\n  const search = evt =>{\n    if (evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result =>{\n        setQuery('');\n        setWeather(result)\n        console.log(result);\n      });\n    }\n  }\n  \n  const dateBuilder=(d) => {\n    let months =[\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\",\n    \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"];\n    let days = [ \"Domingo\",\"Lunes\", \"Martes\", \"Miercoles\", \"Jueves\", \"Viernes\", \"Sabado\"];\n    \n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} de ${month} de ${year}`;\n\n  }\n  var hours= new Date().getHours();\n  var status;\n  if(hours<19){\n    status=\"app\";\n  }else{\n    status=\"app night\"\n  }\n  return (\n    <div className={status}>\n    {/* <Switch\n      isOn={value}\n      handleToggle={() => setValue(!value)}\n    /> */}\n      <div className=\"current-time\">\n        <Clock format={'HH:mm'} ticking={true} timezone={'America/El_Salvador'} />\n      </div>\n      <main>\n        <div className=\"search-box\">\n          <input \n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Buscar Ciudad..\"\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div>\n            <div className=\"location-box\">\n            <div className=\"location\"> {weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n          </div>\n            {/* <div className=\"slide-in-elliptic-top-fwd\"> */}\n              <div className=\"weather-box\" >\n                <div className=\"temp\" >\n                  {Math.round(weather.main.temp)} Â°C\n                </div>\n                <div className=\"weather\" >\n                {weather.weather[0].main}\n                </div>\n            {/* </div> */}\n          </div>\n        </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}